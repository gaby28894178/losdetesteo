generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(100)
  email          String      @unique @db.VarChar(254)
  password       String      @db.VarChar(100)
  address        String?     @db.VarChar(250)
  birthday       DateTime    @db.Timestamp(3)
  city           String?     @db.VarChar(35)
  isAdmin        Boolean?    @default(false)
  picture        String?
  document       String?
  // documentId    String? // es factible este campo ??
  lastUpdatedBy  Int
  lastUpdatedOn  DateTime?   @db.Timestamp(3)
  roleId         Int
  roles          roles       @relation(fields: [roleId], references: [id])
  socialSecurity String      @db.VarChar(9)
  startDate      DateTime    @db.Timestamp(3)
  state          String      @db.VarChar(50)
  statusId       Int
  status         userStatus  @relation(fields: [statusId], references: [id])
  telephone      String      @db.VarChar(15)
  zipcode        String      @db.VarChar(9)
  refreshToken   String?     @db.VarChar(200)
  userPermitId   Int
  userPermits    userPermits @relation(fields: [userPermitId], references: [id])
  newsClosed     news[]      @relation("userNewsClosed")
  newsCreated    news[]      @relation("userNewsCreated")
  notesClosed    notes[]     @relation("userNoteClosed")
  notesCreated   notes[]     @relation("userNoteCreated")
}

model userPermits {
  id                  Int      @id @default(autoincrement())
  accessConfiguration Boolean? @default(false)
  accessNews          Boolean? @default(false)
  users               users[]
}

model roles {
  id          Int     @id @default(autoincrement())
  code        String  @unique @db.VarChar(3)
  description String  @unique @db.VarChar(50)
  users       users[]
}

model userStatus {
  id          Int     @id @default(autoincrement())
  code        String  @unique @db.VarChar(3)
  description String  @unique @db.VarChar(8)
  users       users[]
}

model notes {
  id              Int        @id @default(autoincrement())
  closedOn        DateTime   @db.Timestamp(3)
  createdOn       DateTime   @default(now()) @db.Timestamp(3)
  document        String?
  documentId      String?
  note            String     @db.VarChar(2000)
  status          noteStatus @relation(fields: [statusId], references: [id])
  statusId        Int
  userNoteClosed  users      @relation("userNoteClosed", fields: [closedBy], references: [id])
  closedBy        Int
  userNoteCreated users      @relation("userNoteCreated", fields: [createdBy], references: [id])
  createdBy       Int
}

model noteStatus {
  id          Int     @id @default(autoincrement())
  code        String  @unique @db.VarChar(3)
  description String  @unique @db.VarChar(10)
  notes       notes[]
}

model newsStatus {
  id          Int    @id @default(autoincrement())
  code        String @unique @db.VarChar(3)
  description String @unique @db.VarChar(10)
  news        news[]
}

model news {
  id              Int         @id @default(autoincrement())
  closedOn        DateTime?   @db.Timestamp(3)
  createdOn       DateTime    @default(now()) @db.Timestamp(3)
  description     String      @db.VarChar(400)
  document        String?
  documentId      String?
  questions       questions[]
  status          newsStatus  @relation(fields: [statusId], references: [id])
  statusId        Int
  userNewsClosed  users?      @relation("userNewsClosed", fields: [closedBy], references: [id])
  closedBy        Int?
  userNewsCreated users       @relation("userNewsCreated", fields: [createdBy], references: [id])
  createdBy       Int
}

model questions {
  id          Int     @id @default(autoincrement())
  answer      Boolean
  description String  @db.VarChar(250)
  news        news    @relation(fields: [newsId], references: [id])
  newsId      Int
}
